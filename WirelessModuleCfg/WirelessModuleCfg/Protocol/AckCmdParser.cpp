//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : CAckCmdParser.cpp
//  @ Date : 2014/10/29 星期三
//  @ Author :
//
//

#include "stdafx.h"
#include "ProtocolConst.h"
#include "Cmd.h"
#include "AckCmdParser.h"
#include "../LogSystem.h"

CAckCmdParser::CAckCmdParser(CCmd Cmd)
    : m_Cmd(Cmd)
{
}

CAckCmdParser::~CAckCmdParser()
{
}

BYTE CAckCmdParser::GetFrameHead() const
{
    return m_Cmd.GetFrameHead();
}

BYTE CAckCmdParser::GetPreserveword() const
{
    return m_Cmd.GetCmdPreserveWord();
}

BYTE CAckCmdParser::GetCmdWord() const
{
    return m_Cmd.GetCmdWord();
}

BOOL CAckCmdParser::GetCmdData(PBYTE& pCmdData, DWORD& dwCmdDataLen) const
{
    PBYTE pCmdDataBuffer = m_Cmd.GetCmdDataBuffer();
    if (NULL == pCmdDataBuffer)
    {
        LOG_ERROR("Get the address of ack's cmd data buffer, failed !");
        return FALSE;
    }

    dwCmdDataLen = m_Cmd.GetCmdDataBufferLen();
    pCmdData = new BYTE[dwCmdDataLen]; // 后面没释放分配的内存，造成泄漏
    if (NULL == pCmdData)
    {
        LOG_ERROR("Allocate the buffer of ack's cmd data, failed !");
        return FALSE;
    }

    memset(pCmdData, 0, dwCmdDataLen);
    if (memcpy_s(pCmdData, dwCmdDataLen, pCmdDataBuffer, dwCmdDataLen))
    {
        LOG_ERROR("Copy the data from pCmdDataBuffer to pCmdData, failed !");
        return FALSE;
    }

    return TRUE;
}

DWORD CAckCmdParser::GetCmdLen() const
{
    return m_Cmd.GetCmdLen();
}

PBYTE CAckCmdParser::GetCmdBuffer() const
{
    return m_Cmd.GetCmdBuffer();
}

BYTE CAckCmdParser::GetChecksum() const
{
    return m_Cmd.GetChecksum();
}

BOOL CAckCmdParser::IsCfgCmd() const
{
    if (!IsValidCfgCmdWord())
    {
        LOG_WARN("The cmd' word of cmd is error !");
        return FALSE;
    }

    if (!IsChecksumRight())
    {
        LOG_ERROR("The checksum of cmd is error !");
        return FALSE;
    }

    return TRUE;
}

BOOL CAckCmdParser::IsValidCfgCmdWord() const
{
    switch (m_Cmd.GetCmdWord())
    {
        case CProtocolConst::CMD_SET_BAUD:
        case CProtocolConst::CMD_SET_COMM_CHANNEL:
        case CProtocolConst::CMD_SET_BAND:
        case CProtocolConst::CMD_CFG_SEARCH:
        {
            return TRUE;
        }

        default:
        {
            return FALSE;
        }
    }
}

BOOL CAckCmdParser::IsAckCmd() const
{
    if (!IsValidAckCmdWord())
    {
        LOG_WARN("The cmd's word of ack's cmd is error !");
        return FALSE;
    }

    if (!IsChecksumRight())
    {
        LOG_ERROR("The checksum of ack's cmd is error !");
        return FALSE;
    }

    LOG_INFO("The cmd is valid ack's cmd !");

    return TRUE;
}

BOOL CAckCmdParser::IsValidAckCmdWord() const
{
    switch (m_Cmd.GetCmdWord())
    {
        case CProtocolConst::ACK_CMD_SET_BAUD:
        case CProtocolConst::ACK_CMD_SET_COMM_CHANNEL:
        case CProtocolConst::ACK_CMD_SET_BAND:
        case CProtocolConst::ACK_CMD_CFG_SEARCH:
        case CProtocolConst::ACK_CMD_CFG_MDL_NET_ID:
        {
            return TRUE;
        }

        default:
        {
            return FALSE;
        }
    }
}

BOOL CAckCmdParser::IsValidCfgAckCmd() const
{
    if (!IsAckCmd())
    {
        LOG_INFO("The cmd is not ack's cmd , error !");
        return FALSE;
    }

    if (IsValidSearchAckCmd())
    {
        LOG_INFO("The cmd is the cmd of search ack, not cfg cmd !");
        return FALSE;
    }

    LOG_INFO("The cmd is a valid cfg cmd !");

    return TRUE;
}

BOOL CAckCmdParser::IsValidSearchAckCmd() const
{
    if (!IsAckCmd())
    {
        LOG_INFO("The cmd is not ack's cmd !");
        return FALSE;
    }

    if (m_Cmd.GetCmdWord() != CProtocolConst::ACK_CMD_CFG_SEARCH)
    {
        LOG_INFO("The ack's cmd word is not the cmd word of search's cmd, cmd word value : " <<
                 m_Cmd.GetCmdWord());
        return FALSE;
    }

    LOG_INFO("The cmd is a valid cmd of searching ack !");

    return TRUE;
}

BOOL CAckCmdParser::IsValidAck() const
{
    if (IsValidSearchAckCmd() || IsValidCfgAckCmd())
    {
        return TRUE;
    }

    return FALSE;
}


BOOL CAckCmdParser::IsCmd() const
{
    if (IsCfgCmd() || IsAckCmd())
    {
        return TRUE;
    }

    return FALSE;
}

BOOL CAckCmdParser::IsChecksumRight() const
{
    if (m_Cmd.GetChecksum() == m_Cmd.CalcChecksum())
    {
        return TRUE;
    }

    return FALSE;
}





