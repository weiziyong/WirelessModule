//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : CCommunication.cpp
//  @ Date : 2014/10/29 星期三
//  @ Author :
//
//

#include "stdafx.h"
#include "Communication.h"
#include "../LogSystem.h"
#include "ProtocolConst.h"

CCommunication::CCommunication(const DWORD dwPort, const DWORD dwBaudRate, const DWORD dwTimeOut)
{
    ASSERT((dwPort >= 1) && (dwPort <= 1024));

    m_dwPort = dwPort;
    m_dwBaudRate = dwBaudRate;
    m_dwTimeOut = dwTimeOut;

    m_ComPort.SetOption(0); // 参数为零采用阻塞式IO
}

CCommunication::~CCommunication()
{
    m_ComPort.Close();
}

BOOL CCommunication::SendData(PBYTE const pSendDataBuf, const DWORD dwLen)
{
    if (!IsOpen())
    {
        if (!Open())
        {
            LOG_ERROR("Open the com port :COM" << m_dwPort << " failed !");
            return FALSE;
        }
    }

    DWORD dwSendDataLen = m_ComPort.Write(pSendDataBuf, dwLen);
    LOG_DEBUG("Send " << dwLen << " bytes by request, in fact, send " << dwSendDataLen <<
              " bytes's data !");

    return TRUE;
}

BOOL CCommunication::ReadData(PBYTE const pReadDataBuf,
                              const DWORD dwReadLen,
                              DWORD& dwReadBytes)
{
    if (!IsOpen())
    {
        if (!Open())
        {
            LOG_ERROR("Open com port : COM" << m_dwPort << " failed !");
            return FALSE;
        }
    }

    dwReadBytes = m_ComPort.Read(pReadDataBuf, dwReadLen);
    LOG_DEBUG(TEXT("Request read ") << dwReadLen <<
              TEXT(" bytes data, in fact, read ") <<
              dwReadBytes << TEXT("bytes's data !"));

    return TRUE;
}

void CCommunication::SetCurBaudRate(const DWORD dwPortNum, const DWORD dwBaudRate)
{
    m_dwPort = dwPortNum;
    m_dwBaudRate = dwBaudRate;
}

void CCommunication::GetCurBaudRate(DWORD& dwPortNum, DWORD& dwBaudRate) const
{
    dwPortNum = m_dwPort;
    dwBaudRate = m_dwBaudRate;
}

BOOL CCommunication::IsOpen()
{
    return m_ComPort.IsOpen();
}

BOOL CCommunication::Open()
{
    if (!m_ComPort.Open(m_dwPort, m_dwBaudRate))
    {
        LOG_ERROR("Open com port : COM" << m_dwPort << " failed !");

        return FALSE;
    }

    LPCOMMTIMEOUTS lpTimeOut = m_ComPort.GetTimeouts();
    lpTimeOut->ReadTotalTimeoutConstant = m_dwTimeOut;
    if (!m_ComPort.SetTimeouts(lpTimeOut))
    {
        LOG_ERROR("By " << m_dwBaudRate << " bps, open com port : COM" << m_dwPort << ", set timeout : " <<
                  CProtocolConst::COMM_TIMEOUT << " failed !");

        return FALSE;
    }

    return TRUE;
}

BOOL CCommunication::Close()
{
    m_ComPort.Close();

    return TRUE;
}
